// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  username           String     @unique
  password           String
  firstName          String?
  lastName           String?
  bio                String?
  location           String? // City/place name for user-friendly display
  latitude           Float?
  longitude          Float?
  lastLocationUpdate DateTime?
  age                Int?
  experience         String? // e.g., "Beginner", "Intermediate", "Expert"
  favoriteClasses    String[]   @default([]) // Array of favorite D&D classes
  profilePicture     String? // URL to the profile picture
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  ratings            Rating[]
  comments           Comment[]
  messages           Message[]  @relation("SentMessages")
  receivedMessages   Message[]  @relation("ReceivedMessages")
  posts              Post[]
  postLikes          PostLike[]
}

model Rating {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String
  media     String? // URL to the media file (image or video)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  likes     PostLike[]
  ratings   Rating[]
}

model PostLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([postId, userId])
}
