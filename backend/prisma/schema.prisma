// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  password          String
  bio               String?
  location          String?   // City/place name for user-friendly display
  latitude          Float?
  longitude         Float?
  lastLocationUpdate DateTime?
  age               Int?
  experience        String?   // e.g., "Beginner", "Intermediate", "Expert"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  ratings           Rating[]
  comments          Comment[]
  messages          Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
}

model Rating {
  id        String   @id @default(cuid())
  score     Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}